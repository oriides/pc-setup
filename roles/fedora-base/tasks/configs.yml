################################################################################
### Configure git

- name: "configs : Configure git username"
  community.general.git_config:
    name: user.name
    scope: global
    value: "{{ lookup('env', 'GIT_NAME', default='nobody') }}"

- name: "configs : Configure git email"
  community.general.git_config:
    name: user.email
    scope: global
    value: "{{ lookup('env', 'GIT_EMAIL', default='nobody@example.com') }}"

- name: "configs : Configure git pull/rebase strategy"
  community.general.git_config:
    name: pull.rebase # With rebasing, new commits will be created for the changes on your local branch that start after the changes on the remote branch instead of creating a merge commit.
    scope: global
    value: true

- name: "configs : Configure git fetch prune option"
  community.general.git_config:
    name: fetch.prune # This configuration will automatically clean Git objects in your repository locally whenever you fetch changes from remote.
    scope: global
    value: true

- name: "configs : Configure git rerere option"
  community.general.git_config:
    name: rerere.enabled # This configuration enables merge conflict resolution recording.
    scope: global
    value: true

- name: "configs : Configure git nah alias"
  community.general.git_config:
    name: alias.nah # This alias completely cleans the current repo
    scope: global
    value: '!f(){ echo -n "Are you sure? (y/N) "; read choice; if [[ "$choice" == "y" || "$choice" == "Y" ]]; then git reset --hard; git clean -df; if [ -d ".git/rebase-apply" ] || [ -d ".git/rebase-merge" ]; then git rebase --abort; fi; else echo "Operation canceled"; return 0; fi; }; f'

- name: "configs : Configure git graph alias"
  community.general.git_config:
    name: alias.graph # This alias shows a nice commit graph
    scope: global
    value: "log --oneline --decorate --graph --all"

################################################################################
### Configure zsh & oh-my-zsh

- name: "configs : Set zsh as default shell"
  become: true
  user:
    name: "{{ ansible_user }}"
    shell: "/usr/bin/zsh"
  vars:
    ansible_user: "{{ lookup('env', 'USER') }}"

- block:
    - name: "configs : Install oh-my-zsh - Step 1/2"
      get_url:
        url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        dest: /tmp/install_ohmyzsh.sh
    - name: "configs : install oh-my-zsh - Step 2/2"
      command: sh /tmp/install_ohmyzsh.sh --unattended
      register: ohmyzsh_result
      failed_when: "'FAILED' in ohmyzsh_result.stderr"

- name: "configs: Install oh-my-zsh plugins"
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
  loop:
    - repo: "https://github.com/zsh-users/zsh-autosuggestions"
      dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    - repo: "https://github.com/Aloxaf/fzf-tab"
      dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/fzf-tab"
    # - repo: "https://github.com/zsh-users/zsh-syntax-highlighting"
    #   dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

################################################################################
### Install Rust

- name: "configs : Install Rust Toolchain"
  shell: |
    rustup-init -y

################################################################################
### Install Starship prompt using cargo

- name: "configs : Install Starship Prompt (using cargo)"
  community.general.cargo:
    name: starship
    locked: true

################################################################################
### Suppress podman-docker warning

- name: "configs : Suppress podman-docker warning"
  become: true
  file:
    path: /etc/containers/nodocker
    state: file
    mode: 644

################################################################################
### Install fonts

- block:
    - name: "configs : Install font (Powerline Symbols) - Step 1/2"
      become: true
      get_url:
        url: "https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf"
        dest: "/usr/share/fonts/PowerlineSymbols.otf"
        owner: root
        group: root
    - name: "configs : Install font (Powerline Symbols) - Step 2/2"
      become: true
      get_url:
        url: "https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf"
        dest: "/etc/fonts/conf.d/10-powerline-symbols.conf"
        owner: root
        group: root

- block:
    - name: "configs : Install Google fonts - Step 1/3 (set font list)"
      set_fact:
        google_fonts:
          - "ibmplexsans/IBMPlexSans[wdth,wght].ttf"
          - "ibmplexsans/IBMPlexSans-Italic[wdth,wght].ttf"
          - "ibmplexserif/IBMPlexSerif-Regular.ttf"
          - "ibmplexserif/IBMPlexSerif-Italic.ttf"
          - "inter/Inter[opsz,wght].ttf"
          - "inter/Inter-Italic[opsz,wght].ttf"
          - "lexend/Lexend[wght].ttf"
          - "montserrat/Montserrat[wght].ttf"
          - "montserrat/Montserrat-Italic[wght].ttf"
          - "outfit/Outfit[wght].ttf"
          - "raleway/Raleway[wght].ttf"
          - "raleway/Raleway-Italic[wght].ttf"
          - "spacegrotesk/SpaceGrotesk[wght].ttf"
    - name: "configs : Install Google fonts - Step 2/3 (create target directories)"
      become: true
      file:
        path: "/usr/share/fonts/google-fonts/{{ item | dirname }}"
        state: directory
        owner: root
        group: root
      with_items: "{{ google_fonts }}"
    - name: "configs : Install Google fonts - Step 3/3 (download font files)"
      become: true
      get_url:
        url: "https://github.com/google/fonts/raw/refs/heads/main/ofl/{{ item | urlencode }}"
        dest: "/usr/share/fonts/google-fonts/{{ item }}"
        owner: root
        group: root
      with_items: "{{ google_fonts }}"
      retries: 3
      delay: 3

- block:
    - name: "configs : Install Nerd Fonts - Step 1/3 (set font list)"
      set_fact:
        nerd_fonts:
          - IBMPlexMono
          - IntelOneMono
          - SpaceMono
          - UbuntuMono
    - name: "configs : Install Nerd Fonts - Step 2/3 (create target directories)"
      become: true
      file:
        path: "/usr/share/fonts/nerd-fonts/{{ item }}"
        state: directory
        owner: root
        group: root
      with_items: "{{ nerd_fonts }}"
    - name: "configs : Install Nerd Fonts - Step 3/3 (download font files)"
      become: true
      unarchive:
        remote_src: true
        src: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/{{ item | urlencode }}.tar.xz" # TODO: keep release version up-to-date
        dest: "/usr/share/fonts/nerd-fonts/{{ item }}"
        owner: root
        group: root
      with_items: "{{ nerd_fonts }}"
      retries: 3
      delay: 3

- name: "configs : Reload font cache"
  shell: fc-cache -vf

################################################################################
### Copy dotfiles

- name: "configs : Install .zshrc"
  copy:
    src: "{{ role_path }}/files/dotfiles/.zshrc"
    dest: "~/.zshrc"

- name: "configs : Install .vimrc"
  copy:
    src: "{{ role_path }}/files/dotfiles/.vimrc"
    dest: "~/.vimrc"

################################################################################
### Copy user configs

- name: "configs : Copy user configs into ~/.config"
  copy:
    src: "{{ role_path }}/files/user-configs/{{ item }}"
    dest: "~/.config/"
  with_items:
    - k9s
    - MangoHud
    - mpv
    - solaar
    - starship.toml

################################################################################
### Configure cron
# TODO: consider using systemd timers instead of cron

- name: "configs : Install cron jobs (daily)"
  become: true
  copy:
    src: "{{ role_path }}/files/cronjobs/daily/{{ item }}"
    dest: "/etc/cron.daily/"
    owner: root
    group: root
    mode: 0755
  with_items:
    - delete-downloads

# Warning! This breaks toolbox containers
# - name: "configs : Install cron jobs (weekly)"
#   become: true
#   copy:
#     src: "{{ role_path }}/files/cronjobs/weekly/{{ item }}"
#     dest: "/etc/cron.weekly/"
#     owner: root
#     group: root
#     mode: 0755
#   with_items:
#     - prune-unused-containers

- name: "configs : Enable cron service"
  become: true
  service:
    name: crond
    enabled: yes

- name: "configs : Start cron service"
  become: true
  service:
    name: crond
    state: started

################################################################################
### Copy (dynamic) wallpapers

- name: "configs : Copy wallpapers"
  become: true
  copy:
    src: "{{ role_path }}/files/wallpapers/{{ item }}/{{ item }}"
    dest: "/usr/share/backgrounds/"
    owner: root
    group: root
  with_items:
    - blender
    - chroma_blue
    - desert
    - f36
    - f39
    - zelda

################################################################################
# ### Downlaod custom icon pack

# FIXME: Repo is private, download won't work
# - name: "configs : Download icon pack"
#   become: true
#   git:
#     repo: "https://github.com/oriides/WinOSX-dark"
#     dest: "/usr/share/icons/"
#     accept_newhostkey: true

################################################################################
### Wayland Fix for Solaar (Logitech Peripherals Manager)
### see: https://pwr-solaar.github.io/Solaar/rules.html

- name: "configs: Solaar Wayland fix"
  become: true
  get_url:
    url: "https://raw.githubusercontent.com/pwr-Solaar/Solaar/master/rules.d-uinput/42-logitech-unify-permissions.rules"
    dest: /etc/udev/rules.d/42-logitech-unify-permissions.rules
    owner: root
    group: root
